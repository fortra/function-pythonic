apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xclusters.example.joebowbeer.com
spec:
  compositeTypeRef:
    apiVersion: example.joebowbeer.com/v1alpha1
    kind: XCluster
  mode: Pipeline
  pipeline:
  - step: pythonic
    functionRef:
      name: function-pythonic
    input:
      apiVersion: pythonic.fn.fortra.com/v1alpha1
      kind: Composite
      composite: |
        def argcd_secret_config(secret):
          config = Map()
          config.tlsClientConfig.insecure = True
          config.tlsClientConfig.caData = B64Decode(secret.data['certificate-authority'])
          config.tlsClientConfig.certData = B64Decode(secret.data['client-certificate'])
          config.tlsClientConfig.keyData = B64Decode(secret.data['client-key'])
          return config

        class Composite(BaseComposite):
          def compose(self):
            name = self.metadata.name
            namespace = name

            release = self.resources.release('helm.crossplane.io/v1beta1', 'Release', name=name)
            release.spec.rollbackLimit = 1
            release.spec.forProvider.chart.repository = 'https://charts.loft.sh'
            release.spec.forProvider.chart.name = 'vcluster'
            release.spec.forProvider.chart.version = '0.26.0'
            release.spec.forProvider.namespace = namespace
            release.spec.forProvider.values.controlPlane.proxy.extraSANs[0] = f'{name}.{namespace}'

            secret_name = f'vc-{name}'
            # This will work once crossplane-sdk-python is updated to the v2 function api
            #vcluster_secrets = self.requireds.Secret('v1', 'Secret', namespace, secret_name)
            vcluster_secrets = self.requireds.Secret('v1', 'Secret', labels={'vcluster-name':name})
            for secret in vcluster_secrets:
              if secret.metadata.name != secret_name:
                continue
              argocd_secret = self.resources.secret('v1', 'Secret', 'argocd', secret_name)
              argocd_secret.metadata.labels['argocd.argoproj.io/secret-type'] = 'cluster'
              argocd_secret.type = 'Opaque'
              argocd_secret.data.name = B64Encode(name)
              argocd_secret.data.server = B64Encode(f'https://{name}.{namespace}:443')
              argocd_secret.data.config = B64Encode(format(argcd_secret_config(secret), 'json'))
              argocd_secret.ready = argocd_secret.observed.data
              break
            else:
              self.ready = False
